{# This template is used to generate the OpenSCAD file for a board. #}
{# The template is rendered with the following context: #}
{# - board: The board object from Kiutils #}
{# - config: The project configuration from .toolmasterofbrainerd/config.yaml #}
{% do log.info('Rendering template') -%}
// This file is autogenerated by the ToB build workflow. DO NOT EDIT
include <NopSCADlib/lib.scad>

//! ## {{board.titleBlock.title}} assembly
//! revision {{board.titleBlock.revision or '1.0'}}

THICKNESS = {{board.general.thickness or '1.6'}};

MOUNTING_HOLES = [
        {% for foot in mounting_holes %}
        [ {{foot.position.X}},{{foot.position.Y}} ],
        {% endfor %}
];

{% do log.info("{} mounting holes.".format(mounting_holes | length)) -%}

//Position children at location of mounting holes
module position_pcb_mounts(){
    for (loc=MOUNTING_HOLES) {
        translate([loc[0], loc[1], 0]) children();
    }
}

module base_pcb(){
    difference(){
        color("green") rotate([0,0,180]) linear_extrude(height=THICKNESS, convexity=20) import("../dxf/{{config.project.pkg}}_edge_plan.dxf");
        {% for hole in mounting_holes %}
        translate([{{hole.position.X}},{{hole.position.Y}},0]) cylinder(d={{hole.pads[0].drill.diameter}}, h=THICKNESS*2, center=true, $fn=14);
        {% endfor %}
    }
}

{% for component in board.footprints %}
module position_{{component.properties['Reference'] | sanitize}}(){
    //Position component {{component.properties['Reference']}} at location {{component.position.X}},{{component.position.Y}}
    translate([{{component.position.X}},{{component.position.Y}}, 0]) rotate([{% if 'B.' in component.layer %}180{% else %}0{% endif %},0,{{component.position.angle or 0}}]) children();
}

module {{component.properties['Reference'] | sanitize}}(){
    //NopSCADlib definition for component {{component.properties['Reference']}}, a {{component.properties['Value']}}
}
{% endfor %}

{%- do log.info("{} components.".format(board.footprints | length)) -%}


module {{config.project.pkg}}_board_assembly()
assembly("Assembled {{config.project.pkg}} board"){
    base_pcb();
    {% for component in board.footprints %}
    position_{{component.properties['Reference'] | sanitize}}() {{component.properties['Reference'] | sanitize}}();
    {% endfor %}
}



if($preview)
    {{config.project.pkg}}_board_assembly();