{# This template is used to generate the OpenSCAD file for a board. #}
{# The template is rendered with the following context: #}
{# - board: The board object from Kiutils #}
{# - config: The project configuration from .toolmasterofbrainerd/config.yaml #}
{% do log.info('Rendering template') -%}
// This file is autogenerated by the Toolmaster of Brainerd build workflow. DO NOT EDIT

//! ## {{board.titleBlock.title}} assembly
//! revision {{board.titleBlock.revision or '1.0'}}

//Symbols defined in this document:
{% for component in board.footprints %}
// {{component.properties['Reference'] | sanitize | upper}}
{% endfor %}

THICKNESS = {{board.general.thickness or '1.6'}};
HEIGHT = {{height}};
WIDTH = {{width}};

MOUNTING_HOLES = [
        {% for foot in mounting_holes %}
        [ -{{foot.position.X}},{{foot.position.Y}} ],
        {% endfor %}
];

BOARD_POLY = [{% for line in perimeter | polygonize %}
    [-{{line.start.X}},{{line.start.Y}}],
    {% endfor %}
];

{% do log.info("{} mounting holes.".format(mounting_holes | length)) -%}

//Useful library functions

//Position children at location of mounting holes
module position_pcb_mounts(){
    for (loc=MOUNTING_HOLES) {
        translate([loc[0], loc[1], 0]) children();
    }
}

module base_pcb(){
    difference(){
        color("green") linear_extrude(height=THICKNESS, convexity=20, center=true) polygon(BOARD_POLY);
        {% for hole in mounting_holes %}
        translate([-{{hole.position.X}},{{hole.position.Y}},0]) cylinder(d={{hole.pads[0].drill.diameter}}, h=THICKNESS*2, center=true, $fn=14);
        {% endfor %}
    }
}

module base_pcb_margin(){
    minkowski(){
        linear_extrude(height=THICKNESS, convexity=20, center=true) polygon(BOARD_POLY);
        cube([0.4, 0.4, 0.4], center=true);
    }
}

module base_pcb_clearance(upper=5, lower=5, wall_thickness=1.2){
    difference(){
        union(){
            translate([0,0,upper/2+THICKNESS/2]) linear_extrude(upper, convexity=20, center=true) offset(-wall_thickness) polygon(BOARD_POLY);
            translate([0,0,-lower/2-THICKNESS/2]) linear_extrude(lower, convexity=20, center=true) offset(-wall_thickness) polygon(BOARD_POLY);
        }
        position_pcb_mounts() cylinder(d=8, h=(upper+lower)*2+1, center=true, $fn=14);
    }
}

module rezero_to(component){
    translate([-component.x, -component.y], 0) children();
}

//Component definitions and positioners

{% for component in board.footprints %}
{% set name = component.properties['Reference'] | sanitize | upper %}
{{name}} = [-{{component.position.X}},{{component.position.Y}},0];
module position_{{component.properties['Reference'] | sanitize}}(){
    //Position component {{component.properties['Reference']}} at location -{{component.position.X}},{{component.position.Y}}
    translate([{{name}}.x,{{name}}.y, 0]) rotate([{% if 'B.' in component.layer %}180{% else %}0{% endif %},0,{{component.position.angle or 0}}]) children();
}

{% endfor %}

{%- do log.info("{} components.".format(board.footprints | length)) -%}



if($preview)
    base_pcb();
    %base_pcb_clearance();
    %base_pcb_margin();